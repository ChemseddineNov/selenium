from playwright.sync_api import sync_playwright
import pandas as pd
import re
import time
from typing import Dict, Any, List
import tkinter as tk
from tkinter import filedialog

# ================== PICKER EXCEL ==================
root = tk.Tk()
root.withdraw()
EXCEL_PATH = filedialog.askopenfilename(
    title="Sélectionnez le fichier Excel",
    filetypes=[("Fichiers Excel", "*.xlsx *.xls")]
)
if not EXCEL_PATH:
    raise Exception("❌ Aucun fichier sélectionné, arrêt du script.")
print(f"✅ Fichier Excel sélectionné : {EXCEL_PATH}")

# ================== LECTURE EXCEL ==================
def _to_bool(x) -> bool:
    if isinstance(x, bool): return x
    if x is None: return False
    s = str(x).strip().lower()
    return s in ("1", "true", "vrai", "oui", "yes", "y")

def _clean_phone(s: str) -> str:
    if s is None:
        return ""
    s = str(s).strip()
    return re.sub(r"\s+", "", s)

def load_config(path: str) -> Dict[str, Any]:
    sheets = pd.read_excel(path, sheet_name=None, dtype=str)

    # --- traitement ---
    tr = sheets.get("traitement", pd.DataFrame()).fillna("")
    tr_row = tr.iloc[0].to_dict() if not tr.empty else {}
    traitement = {
        "code": tr_row.get("code", "TRT-TEST"),
        "name_fr": tr_row.get("name_fr", "Test Ressources Humaines"),
        "name_ar": tr_row.get("name_ar", "تجربة الموارد البشرية"),
        "status": tr_row.get("status", "En cours"),
        "type_manuel": _to_bool(tr_row.get("type_manuel", True)),
        "type_automatique": _to_bool(tr_row.get("type_automatique", True)),
    }

    # --- fondement_legal ---
    fd = sheets.get("fondement_legal", pd.DataFrame()).fillna("")
    fd_row = fd.iloc[0].to_dict() if not fd.empty else {}
    fondement = {
        "texte_fr": fd_row.get("texte_fr", ""),
        "texte_ar": fd_row.get("texte_ar", ""),
        "base_consentement": _to_bool(fd_row.get("base_consentement", False)),
        "base_obligation": _to_bool(fd_row.get("base_obligation", False)),
        "base_vie": _to_bool(fd_row.get("base_vie", False)),
        "base_vitaux": _to_bool(fd_row.get("base_vitaux", False)),
        "base_contrat": _to_bool(fd_row.get("base_contrat", False)),
        "base_public": _to_bool(fd_row.get("base_public", False)),
        "base_interet_legitime": _to_bool(fd_row.get("base_interet_legitime", False)),
        "note": fd_row.get("note", ""),
    }

    # --- categories_personnes ---
    cp_df = sheets.get("categories_personnes", pd.DataFrame()).fillna("")
    categories_personnes = []
    for _, r in cp_df.iterrows():
        categories_personnes.append({
            "categorie": r.get("categorie", ""),
            "type_collecte": r.get("type_collecte", ""),
            "mode_collecte": r.get("mode_collecte", ""),
            "securites": {
                "Traçabilité": _to_bool(r.get("tracabilite", False)),
                "Signature électronique": _to_bool(r.get("signature_elec", False)),
                "Chiffrement": _to_bool(r.get("chiffrement", False)),
                "Charte de sécurité": _to_bool(r.get("charte_securite", False)),
            }
        })

    # --- categories_donnees ---
    cd_df = sheets.get("categories_donnees", pd.DataFrame()).fillna("")
    categories_donnees = []
    for _, r in cd_df.iterrows():
        categories_donnees.append({
            "categorie_index": int(r.get("categorie_index", 0)) if str(r.get("categorie_index", "0")).strip().isdigit() else 0,
            "type": r.get("type", ""),
            "origine": r.get("origine", ""),
            "utilise": r.get("utilise", ""),
            "source": r.get("source", ""),
            "duree_type": r.get("duree_type", "Limitée"),
            "duree": int(r.get("duree", 0)) if str(r.get("duree", "")).strip().isdigit() else 0,
            "declencheur": r.get("declencheur", ""),
        })

    # --- finalite ---
    fin_df = sheets.get("finalite", pd.DataFrame()).fillna("")
    fin_row = fin_df.iloc[0].to_dict() if not fin_df.empty else {}
    finalite = {
        "fr": fin_row.get("finalite_fr", ""),
        "ar": fin_row.get("finalite_ar", ""),
    }

    # --- sous_traitements ---
    st_df = sheets.get("sous_traitements", pd.DataFrame()).fillna("")
    sous_traitements = []
    for _, r in st_df.iterrows():
        types = [t.strip() for t in str(r.get("types", "")).split(",") if t.strip()]
        sous_traitements.append({
            "denomination_fr": r.get("denomination_fr", ""),
            "denomination_ar": r.get("denomination_ar", ""),
            "types": types,
            "base_legale": r.get("base_legale", ""),
            "sous_traitant": r.get("sous_traitant", ""),
            "logiciel": r.get("logiciel", ""),
            "note": r.get("note", "")
        })

    # --- conservation ---
    cons_df = sheets.get("conservation", pd.DataFrame()).fillna("")
    cons_row = cons_df.iloc[0].to_dict() if not cons_df.empty else {}
    modes = []
    if _to_bool(cons_row.get("manuel", True)): modes.append("Manuel")
    if _to_bool(cons_row.get("informatique", True)): modes.append("Informatique")
    conservation = {
        "modes": modes,
        "manuel": {"nom": cons_row.get("manuel_nom", ""), "lieu": cons_row.get("manuel_lieu", "")},
        "informatique": {"nom": cons_row.get("info_nom", ""), "lieu": cons_row.get("info_lieu", "")}
    }

    # --- destinataires ---
    dest_df = sheets.get("destinataires", pd.DataFrame()).fillna("")
    destinataires = []
    for _, r in dest_df.iterrows():
        destinataires.append({
            "destinataire": r.get("destinataire", ""),
            "moyen": r.get("moyen", ""),
            "cadre_legal": _to_bool(r.get("cadre_legal", "Oui")),
            "objectifs": r.get("objectifs", ""),
            "observation": r.get("observation", "")
        })

    # --- consentement ---
    cons2_df = sheets.get("consentement", pd.DataFrame()).fillna("")
    cons2_row = cons2_df.iloc[0].to_dict() if not cons2_df.empty else {}
    consentement = {
        "existe": _to_bool(cons2_row.get("existe", "Oui")),
        "methode_fr": cons2_row.get("methode_fr", ""),
        "methode_ar": cons2_row.get("methode_ar", ""),
    }

    # --- droits ---
    droits_df = sheets.get("droits", pd.DataFrame()).fillna("")
    droits_map: Dict[str, Dict[str, Any]] = {}
    for _, r in droits_df.iterrows():
        key = str(r.get("droit", "")).strip().lower()
        if key not in ("information", "acces", "rectification", "opposition"):
            continue
        droits_map[key] = {
            "comment": r.get("comment_fr", ""),
            "comment_ar": r.get("comment_ar", ""),
            "mesures": r.get("mesures_fr", ""),
            "mesures_ar": r.get("mesures_ar", ""),
            "service": {
                "nom": r.get("service_nom_fr", ""),
                "nom_ar": r.get("service_nom_ar", ""),
                "mobile": _clean_phone(r.get("mobile", "")),
                "email": r.get("email", ""),
                "adresse": r.get("adresse_fr", ""),
                "adresse_ar": r.get("adresse_ar", "")
            }
        }

    # --- taches ---
    t_df = sheets.get("taches", pd.DataFrame()).fillna("")
    taches = []
    for _, r in t_df.iterrows():
        taches.append({"fr": r.get("fr", ""), "ar": r.get("ar", r.get("fr", ""))})

    return {
        "traitement": traitement,
        "fondement": fondement,
        "categories_personnes": categories_personnes,
        "categories_donnees": categories_donnees,
        "finalite": finalite,
        "sous_traitements": sous_traitements,
        "conservation": conservation,
        "destinataires": destinataires,
        "consentement": consentement,
        "droits": droits_map,
        "taches": taches,
    }

# ================== HELPERS UI (page & modal) ==================
def select_dropdown(page, label, value):
    inp = page.locator(f"label:has-text('{label}') + div input[placeholder]").first
    inp.click()
    page.wait_for_selector("div.v-overlay-container .v-list-item-title", state="visible")
    page.locator("div.v-overlay-container .v-list-item-title", has_text=value).first.click()

def fill_input(page, label, value):
    page.wait_for_selector(f"label:has-text('{label}')")
    page.locator(f"label:has-text('{label}')").locator("xpath=..").locator("input, textarea").first.fill(str(value))

def safe_fill_input(el, value: str):
    try: el.scroll_into_view_if_needed()
    except Exception: pass
    try:
        el.click(force=True)
        el.page.keyboard.press("Control+A")
        el.page.keyboard.press("Delete")
        el.type(str(value), delay=25)
        el.page.keyboard.press("Tab")
        el.page.wait_for_timeout(80)
        return True
    except Exception:
        return False

def get_active_panel(page):
    pnl = page.locator('[role="tabpanel"]:visible, .v-window-item--active').first
    return pnl if pnl.count() else None

def _scope(panel_or_none, page, selector: str):
    if panel_or_none:
        nodes = panel_or_none.locator(selector)
        if nodes.count():
            return nodes
    return page.locator(selector)

def save_current_section(page, panel=None, label="section"):
    for _ in range(2):
        try: page.keyboard.press("Escape")
        except Exception: pass
        page.wait_for_timeout(60)
    for _ in range(3):
        try:
            btns = _scope(panel, page, "button:has-text('Enregistrer')")
            btn = btns.filter(has_not=page.locator('[aria-hidden="true"]')).last
            if not btn.count():
                btn = page.locator("button:has-text('Enregistrer')").last
            btn.scroll_into_view_if_needed()
            btn.click(force=True)
            page.wait_for_load_state("networkidle")
            page.wait_for_timeout(200)
            return True
        except Exception:
            page.wait_for_timeout(180)
    return False

def get_modal(page):
    return page.locator("[role='dialog']:has(button:has-text('Enregistrer')):visible, div.v-overlay-container:has(button:has-text('Enregistrer')):visible").last

def save_modal(page, modal, label="modal"):
    for _ in range(3):
        try:
            btn = modal.get_by_role("button", name=re.compile(r"^\s*Enregistrer\s*$", re.I)).last
            if not btn.count():
                btn = modal.locator("button:has-text('Enregistrer')").last
            btn.scroll_into_view_if_needed(); btn.click(force=True)
            try:
                btn.wait_for(state="detached", timeout=1500)
            except Exception:
                page.wait_for_selector(
                    "[role='dialog']:has(button:has-text('Enregistrer')), div.v-overlay-container:has(button:has-text('Enregistrer'))",
                    state="hidden",
                    timeout=3000
                )
            return True
        except Exception:
            try: page.keyboard.press("Escape")
            except: pass
            page.wait_for_timeout(200)
    return False

# ================== 🔧 CLICK_AJOUTER — version rapide (même signature/usage) ==================
def click_ajouter(page, contexte=""):
    """
    Clique sur le bouton 'Ajouter' le plus pertinent sans bloquer 60s.
    - On privilégie le panel actif.
    - On filtre les boutons visibles.
    - On tente un click JS direct (pas d'attente d'actionability).
    - Sinon .click(force=True, timeout=1000).
    """
    patterns = [re.compile(r"^\s*\+?\s*Ajouter\s*$", re.I)]
    scopes = []
    panel = get_active_panel(page)
    if panel and panel.count():
        # petit conteneur probable (toolbar/carte) en priorité
        cont = panel.locator("xpath=.//*[contains(@class,'v-toolbar') or contains(@class,'v-card') or contains(@class,'v-sheet')][1]")
        if cont.count():
            scopes.append(cont.first)
        scopes.append(panel)
    scopes.append(page)

    for scope in scopes:
        for pat in patterns:
            btns = scope.get_by_role("button", name=pat).filter(has_not=page.locator('[aria-hidden="true"]'))
            total = btns.count()
            if total == 0:
                continue
            tries = min(total, 4)  # on essaie les 4 premiers max
            for i in range(tries):
                btn = btns.nth(i)
                try:
                    btn.scroll_into_view_if_needed()
                except Exception:
                    pass
                # 1) click JS direct
                try:
                    handle = btn.element_handle(timeout=800)
                    if handle:
                        handle.evaluate("b => b.click()")
                        page.wait_for_timeout(120)
                        return True
                except Exception:
                    pass
                # 2) fallback: click Playwright court
                try:
                    btn.click(force=True, timeout=1000)
                    page.wait_for_timeout(120)
                    return True
                except Exception:
                    continue

    # Dernier recours global rapide
    try:
        page.get_by_role("button", name=re.compile(r"^\s*\+?\s*Ajouter\s*$", re.I)).first.click(force=True, timeout=1200)
        page.wait_for_timeout(120)
        return True
    except Exception:
        return False

def select_dropdown_in(root, label, value):
    inp = root.locator(f"label:has-text('{label}') + div input[placeholder]").first
    inp.click()
    root.page.wait_for_selector("div.v-overlay-container .v-list-item-title", state="visible")
    root.page.locator("div.v-overlay-container .v-list-item-title", has_text=value).first.click()

def fill_in(root, label, value):
    root.locator(f"label:has-text('{label}')").locator("xpath=..").locator("textarea, input").first.fill(str(value))

# =============== Helper chrono pour logs (ne change pas la logique) ===============
class StepTimer:
    def __init__(self, prefix: str):
        self.prefix = prefix
        self.t0 = time.perf_counter()
        self.last = self.t0
    def step(self, msg: str):
        now = time.perf_counter()
        print(f"⏱ {self.prefix} > {msg} (+{now - self.last:.2f}s)")
        self.last = now

# ================== CATÉGORIES (personnes) ==================
def remplir_categories_personnes(page, categories):
    menu_item = page.locator("text=Catégories de données à caractère personnel")
    menu_item.scroll_into_view_if_needed(); menu_item.click(force=True)
    page.wait_for_timeout(300)

    for r in categories:
        click_ajouter(page, "Catégorie de personnes")
        modal = get_modal(page)
        select_dropdown_in(modal, "Catégorie des personnes concernées", r["categorie"])
        select_dropdown_in(modal, "Type de collecte de données", r["type_collecte"])
        select_dropdown_in(modal, "Mode de collecte", r["mode_collecte"])
        for sec_label, active in r["securites"].items():
            if active:
                try:
                    cb = modal.locator(f"label:has-text('{sec_label}')").first
                    if cb.is_visible(): cb.click()
                except Exception:
                    pass
        save_modal(page, modal, label=f"Catégorie {r['categorie']}")
        page.wait_for_timeout(150)

# ================== CATÉGORIES DE DONNÉES — MODAL + SAVE ==================
def _open_cat_donnees_tab(page):
    tab = page.get_by_text("Catégorie des données collectées et traitées", exact=True)
    tab.scroll_into_view_if_needed(); tab.click(force=True)
    page.wait_for_timeout(150)

def _click_plus_ajouter_et_ouvrir_modal(page):
    _open_cat_donnees_tab(page)
    mass = page.get_by_role("button", name=re.compile(r"Ajouter\s+En\s+Masse", re.I)).first
    mass.wait_for(state="visible", timeout=8000)
    container = mass.locator(
        "xpath=ancestor::*[self::div[contains(@class,'v-toolbar')] or contains(@class,'v-card') or contains(@class,'v-sheet') or contains(@class,'container')][1]"
    )
    add_btn = container.get_by_role("button", name=re.compile(r"^\s*\+?\s*Ajouter\s*$", re.I)).first
    if not add_btn.count():
        add_btn = page.get_by_role("button", name=re.compile(r"^\s*\+?\s*Ajouter\s*$", re.I)).first
    add_btn.scroll_into_view_if_needed(); add_btn.click(force=True)

    modal = page.locator(
        "[role='dialog']:has(button:has-text('Enregistrer')):visible, "
        "div.v-overlay-container:has(button:has-text('Enregistrer')):visible"
    ).last
    modal.wait_for(state="visible", timeout=8000)
    return modal

def ajouter_categorie_donnees(page, donnee):
    modal = _click_plus_ajouter_et_ouvrir_modal(page)

    # Catégorie (par index)
    cat = modal.locator("label:has-text('Catégorie des données')").locator("xpath=..").locator("input[role='combobox'], input").first
    cat.click(force=True)
    page.wait_for_selector("div.v-overlay-container .v-list-item-title", state="visible", timeout=8000)
    page.locator("div.v-overlay-container .v-list-item-title").nth(donnee["categorie_index"]).click()

    # Autres champs
    select_dropdown_in(modal, "Type des données", donnee["type"])
    select_dropdown_in(modal, "Origine de la donnée", donnee["origine"])
    select_dropdown_in(modal, "Utilisé(s) pour la finalité du traitement", donnee["utilise"])
    select_dropdown_in(modal, "Source de données", donnee["source"])
    if donnee["duree_type"] != "Limitée":
        select_dropdown_in(modal, "Durée de conservation", donnee["duree_type"])
    fill_in(modal, "Préciser la durée (mois)", donnee["duree"])
    fill_in(modal, "Élément déclencheur", donnee["declencheur"])

    # Enregistrer dans le MODAL puis attendre sa fermeture
    save_modal(page, modal, label="Catégorie de données")
    page.wait_for_timeout(150)

def remplir_categories_donnees(page, categories):
    _open_cat_donnees_tab(page)
    for d in categories:
        ajouter_categorie_donnees(page, d)
    # facultatif : sauvegarde globale de la section
    try:
        save_current_section(page, label="Catégories de données")
    except Exception:
        pass

# ================== FINALITÉ ==================
def remplir_finalite(page, finalite_fr, finalite_ar):
    menu_item = page.get_by_text("Finalité", exact=True)
    menu_item.scroll_into_view_if_needed(); menu_item.click(force=True)
    page.wait_for_timeout(250)
    page.locator("label:has-text('Finalité (but) du traitement')").locator("xpath=..").locator("textarea").fill(finalite_fr)
    page.locator("label:has-text('الغاية (الهدف) من المعالجة')").locator("xpath=..").locator("textarea").fill(finalite_ar)
    save_current_section(page, label="Finalité")

# ================== SOUS-TRAITEMENTS (modal) ==================
def ajouter_sous_traitement(page, st):
    print(f"➡️ Sous-traitements: ajout «{st.get('denomination_fr','').strip() or 'N/A'}»")
    timer = StepTimer("Sous-traitements")

    click_ajouter(page, "Sous-traitement"); timer.step("clic '+ Ajouter'")
    modal = get_modal(page);                timer.step("modal détecté")

    modal.locator("input").nth(0).fill(st["denomination_fr"]); timer.step("champ 'Dénomination FR' rempli")
    modal.locator("input").nth(1).fill(st["denomination_ar"]); timer.step("champ 'Dénomination AR' rempli")

    type_input = modal.locator("label:has-text('Type de traitement') + div input").first
    type_input.click();                     timer.step("ouverture liste 'Type de traitement'")
    page.wait_for_selector("div.v-overlay-container .v-list-item-title", state="visible"); timer.step("liste des types visible")
    for t in st["types"]:
        page.locator("div.v-overlay-container .v-list-item-title", has_text=t).first.click()
        timer.step(f"type sélectionné: {t}")
    page.keyboard.press("Escape");          timer.step("fermeture liste types (Esc)")

    select_dropdown_in(modal, "Base légale", st["base_legale"]); timer.step("sélection 'Base légale'")
    if st.get("sous_traitant"):
        select_dropdown_in(modal, "Sous traitant", st["sous_traitant"]); timer.step("sélection 'Sous traitant'")
    if st.get("logiciel"):
        select_dropdown_in(modal, "Logiciel utilisé", st["logiciel"]);   timer.step("sélection 'Logiciel utilisé'")
    modal.locator("textarea").last.fill(st["note"]);                       timer.step("champ 'Note' rempli")

    timer.step("prêt à cliquer 'Enregistrer' (modal)")
    save_modal(page, modal, label="Sous-traitement"); timer.step("clic 'Enregistrer' (modal) & fermeture")
    page.wait_for_timeout(250);                                timer.step("pause post-enregistrement")

# ================== CONSERVATION DES DONNÉES (page) ==================
def ajouter_conservation_donnees(page, conservation):
    onglet = page.get_by_text("Conservation des données", exact=True)
    onglet.scroll_into_view_if_needed(); onglet.click(force=True)
    page.wait_for_load_state("networkidle"); page.wait_for_timeout(200)

    def fill_by_label(label_text: str, value: str):
        lab = page.locator(f"label:has-text('{label_text}')").first
        lab.wait_for(state="visible", timeout=8000)
        inp = lab.locator("xpath=..").locator("input, textarea").first
        inp.wait_for(state="visible", timeout=8000)
        inp.fill(value)

    def ensure_checked(name_substring: str):
        cb = page.get_by_role("checkbox", name=name_substring, exact=False).first
        cb.wait_for(state="visible", timeout=8000)
        try:
            if not cb.is_checked(): cb.check(force=True)
        except Exception: cb.click(force=True)

    if "Manuel" in conservation["modes"]: ensure_checked("Manuel")
    if "Informatique" in conservation["modes"]: ensure_checked("Informatique")

    if conservation.get("informatique"):
        fill_by_label("Nom de la base de données", conservation["informatique"]["nom"])
        fill_by_label("Lieu de stockage de la base de données", conservation["informatique"]["lieu"])
    if conservation.get("manuel"):
        fill_by_label("Nom du fichier manuel", conservation["manuel"]["nom"])
        fill_by_label("Lieu de stockage du fichier", conservation["manuel"]["lieu"])

    save_current_section(page, label="Conservation des données")

# ================== DESTINATAIRES (modal) ==================
def modal_select_dropdown(modal, label, value):
    inp = modal.locator(f"label:has-text('{label}') + div input[placeholder]").first
    inp.click()
    modal.page.wait_for_selector("div.v-overlay-container .v-list-item-title", state="visible")
    modal.page.locator("div.v-overlay-container .v-list-item-title", has_text=value).first.click()

def modal_fill(modal, label, value):
    modal.locator(f"label:has-text('{label}')").locator("xpath=..").locator("textarea, input").first.fill(str(value))

def ajouter_un_destinataire(page, d):
    print(f"➡️ Destinataires: ajout «{d.get('destinataire','').strip() or 'N/A'}»")
    timer = StepTimer("Destinataires")

    click_ajouter(page, "Destinataire"); timer.step("clic '+ Ajouter'")
    modal = get_modal(page);            timer.step("modal détecté")

    dest_input = modal.locator("label:has-text('Destinataire') + div input").first
    dest_input.click();                 timer.step("focus champ 'Destinataire'")
    if d.get("destinataire"):
        dest_input.fill(d["destinataire"]); modal.page.wait_for_timeout(150); timer.step("saisie filtre 'Destinataire'")
    modal.page.wait_for_selector("div.v-overlay-container .v-list-item-title", state="visible"); timer.step("liste des destinataires visible")
    modal.page.locator("div.v-overlay-container .v-list-item-title", has_text=d["destinataire"]).first.click(); timer.step("option 'Destinataire' sélectionnée")

    if d.get("moyen"):        modal_select_dropdown(modal, "Moyen de communication", d["moyen"]);                timer.step("sélection 'Moyen de communication'")
    if d.get("cadre_legal") is not None: modal_select_dropdown(modal, "Cadre legal", "Oui" if d["cadre_legal"] else "Non"); timer.step("sélection 'Cadre legal'")
    if d.get("objectifs"):   modal_fill(modal, "Objectifs", d["objectifs"]);                                    timer.step("champ 'Objectifs' rempli")
    if d.get("observation"): modal_fill(modal, "Observation", d["observation"]);                                timer.step("champ 'Observation' rempli")

    timer.step("prêt à cliquer 'Enregistrer' (modal)")
    save_modal(page, modal, label="Destinataire"); timer.step("clic 'Enregistrer' (modal) & fermeture")
    modal.page.wait_for_timeout(150);                                        timer.step("pause post-enregistrement")

def ajouter_destinataires(page, items):
    print(f"➡️ Destinataires: {len(items)} élément(s) à ajouter")
    onglet = page.get_by_text("Les destinataires des données", exact=True)
    onglet.scroll_into_view_if_needed(); onglet.click(force=True)
    page.wait_for_timeout(200)
    print("… onglet ouvert")
    for d in items:
        ajouter_un_destinataire(page, d)
    save_current_section(page, label="Destinataires")
    print("💾 Destinataires: section enregistrée")

# ================== CONSENTEMENT (page) ==================
def ajouter_consentement(page, consent):
    onglet = page.get_by_text("Consentement", exact=True)
    onglet.scroll_into_view_if_needed(); onglet.click(force=True)
    page.wait_for_timeout(200)
    select_dropdown(page, "Consentement des personnes concernées : Existe ?", "Oui" if consent.get("existe", True) else "Non")
    ta_fr = page.locator("label:has-text('Indiquer la méthode de consentement')").locator("xpath=..").locator("textarea").first
    if not ta_fr.count(): ta_fr = page.locator("textarea").first
    ta_fr.fill(consent.get("methode_fr", ""))
    ta_ar = page.locator("label:has-text('حدد كيفية أخذ الموافقة الصريحة')").locator("xpath=..").locator("textarea").first
    if not ta_ar.count() and page.locator("textarea").count() > 1: ta_ar = page.locator("textarea").nth(1)
    if ta_ar: ta_ar.fill(consent.get("methode_ar", ""))
    save_current_section(page, label="Consentement")

# ================== DROITS DES PERSONNES (page) ==================
def fill_pair_ids(page, panel, fr_id: str, fr_val: str, ar_id: str | None, ar_val: str | None):
    fr_val = fr_val or ""
    ar_val = ar_val if ar_val is not None else fr_val
    fr_nodes = _scope(panel, page, f'textarea#{fr_id}, input#{fr_id}')
    if fr_nodes.count():
        for i in range(fr_nodes.count()):
            safe_fill_input(fr_nodes.nth(i), fr_val)
    if ar_id:
        ar_nodes = _scope(panel, page, f'textarea#{ar_id}, input#{ar_id}')
        if ar_nodes.count():
            for i in range(ar_nodes.count()):
                safe_fill_input(ar_nodes.nth(i), ar_val)

def click_onglet_vuetify(page, titre: str, expect_prefix: str | None = None):
    variants = list(dict.fromkeys([titre, titre.replace("'", "’"), titre.replace("’", "'")]))
    tablist = page.locator('[role="tablist"]').first
    if tablist.count():
        for _ in range(8):
            for cand in variants:
                tab = tablist.get_by_role("tab", name=cand, exact=False).first
                if tab.count():
                    tab.scroll_into_view_if_needed(); tab.click(force=True)
                    page.wait_for_timeout(180)
                    if expect_prefix:
                        active = get_active_panel(page) or page
                        sel = active.locator(f'[id^="{expect_prefix}_"]')
                        if sel.count(): return
                    return
            nxt = tablist.locator('.v-slide-group__next')
            if nxt.count() and nxt.is_enabled():
                nxt.click(); page.wait_for_timeout(120)
            else:
                break
    for cand in variants:
        t = page.get_by_role("tab", name=cand, exact=False).first
        if t.count():
            t.click(force=True); page.wait_for_timeout(180); return
    page.get_by_text(titre.replace("’","'"), exact=False).first.click(); page.wait_for_timeout(180)

def remplir_droits_personnes(page, dp):
    menu = page.get_by_text("Droit des personnes", exact=False)
    menu.scroll_into_view_if_needed(); menu.click(force=True)
    page.wait_for_load_state("networkidle"); page.wait_for_timeout(200)

    if dp.get("information"):
        click_onglet_vuetify(page, "Droit à l'information", expect_prefix="information_right")
        panel = get_active_panel(page)
        info = dp["information"]; svc = info.get("service", {})
        fill_pair_ids(page, panel, "information_right_how", info.get("comment",""), "information_right_how_ar", info.get("comment_ar"))
        fill_pair_ids(page, panel, "information_right_mesures_prise", info.get("mesures",""), "information_right_mesures_prise_ar", info.get("mesures_ar"))
        fill_pair_ids(page, panel, "information_right_service_name", svc.get("nom",""), "information_right_service_name_ar", svc.get("nom_ar"))
        mob = _scope(panel, page, "#information_right_phone")
        if mob and mob.count(): safe_fill_input(mob.first, _clean_phone(svc.get("mobile","")))
        email = _scope(panel, page, "#information_right_email")
        if email and email.count(): safe_fill_input(email.first, svc.get("email",""))
        addr_fr = _scope(panel, page, "#information_right_address")
        if addr_fr and addr_fr.count(): safe_fill_input(addr_fr.first, svc.get("adresse",""))
        addr_ar = _scope(panel, page, "#information_right_address_ar")
        if addr_ar and addr_ar.count(): safe_fill_input(addr_ar.first, svc.get("adresse_ar", svc.get("adresse","")))
        save_current_section(page, panel, label="Droit à l'information")

    def traiter_autre_onglet(titre, pref, data):
        click_onglet_vuetify(page, titre, expect_prefix=pref)
        panel = get_active_panel(page)
        svc = data.get("service", {})
        fill_pair_ids(page, panel, f"{pref}_how", data.get("comment",""), f"{pref}_how_ar", data.get("comment_ar"))
        fill_pair_ids(page, panel, f"{pref}_mesures_prise", data.get("mesures",""), f"{pref}_mesures_prise_ar", data.get("mesures_ar"))
        fill_pair_ids(page, panel, f"{pref}_service_name", svc.get("nom",""), f"{pref}_service_name_ar", svc.get("nom_ar"))
        mob = _scope(panel, page, f"#{pref}_phone")
        if mob and mob.count(): safe_fill_input(mob.first, _clean_phone(svc.get("mobile","")))
        email = _scope(panel, page, f"#{pref}_email")
        if email and email.count(): safe_fill_input(email.first, svc.get("email",""))
        addr_fr = _scope(panel, page, f"#{pref}_address")
        if addr_fr and addr_fr.count(): safe_fill_input(addr_fr.first, svc.get("adresse",""))
        addr_ar = _scope(panel, page, f"#{pref}_address_ar")
        if addr_ar and addr_fr and addr_ar.count(): safe_fill_input(addr_ar.first, svc.get("adresse_ar", svc.get("adresse","")))
        save_current_section(page, panel, label=titre)

    if dp.get("acces"):         traiter_autre_onglet("Droit d'accès", "access_right", dp["acces"])
    if dp.get("rectification"): traiter_autre_onglet("Droit à la rectification", "rectification_right", dp["rectification"])
    if dp.get("opposition"):    traiter_autre_onglet("Droit d'opposition", "opposition_right", dp["opposition"])

# ================== TÂCHES INITIALES (modal) ==================
def ajouter_taches_initiales(page, taches: List[Dict[str,str]]):
    print(f"➡️ Tâches initiales: {len(taches)} tâche(s) à ajouter")
    menu = page.get_by_text("Tâches initiales", exact=False)
    menu.scroll_into_view_if_needed(); menu.click(force=True)
    page.wait_for_load_state("networkidle"); page.wait_for_timeout(180)
    print("… onglet ouvert")
    for idx, t in enumerate(taches, start=1):
        print(f"--- Tâche {idx}/{len(taches)} ---")
        timer = StepTimer(f"Tâches initiales {idx}/{len(taches)}")

        click_ajouter(page, "Tâche initiale"); timer.step("clic '+ Ajouter'")
        modal = get_modal(page);              timer.step("modal détecté")

        fields = modal.locator("input, textarea").filter(has_not=modal.locator('[aria-hidden="true"]'))
        fields.nth(0).fill(t.get("fr",""));  timer.step("champ FR rempli")
        fields.nth(1).fill(t.get("ar", t.get("fr",""))); timer.step("champ AR rempli")

        timer.step("prêt à cliquer 'Enregistrer' (modal)")
        save_modal(page, modal, label="Tâche initiale"); timer.step("clic 'Enregistrer' (modal) & fermeture")
        page.wait_for_timeout(150);           timer.step("pause post-enregistrement")
    save_current_section(page, label="Tâches initiales")
    print("💾 Tâches initiales: section enregistrée")

# ================== SCRIPT PRINCIPAL ==================
with sync_playwright() as p:
    cfg = load_config(EXCEL_PATH)

    browser = p.chromium.launch(headless=False)
    page = browser.new_page()

    # --- Connexion ---
    page.goto("https://admin.dp-manager.com/login")
    page.fill("input[placeholder=\"Nom d'utilisateur\"]", "admin")
    page.fill("input[type='password']", "Chtitha@58206670")
    page.click("button:has-text(\"S'authentifier\")")
    page.wait_for_url("**/tenants", timeout=20000)
    print("✅ Connexion réussie")

    # --- Création traitement ---
    page.goto("https://admin.dp-manager.com/registers/trt-registers/create")
    page.wait_for_url("**/registers/trt-registers/create", timeout=20000)
    page.fill("#code", cfg["traitement"]["code"])
    page.fill("#name", cfg["traitement"]["name_fr"])
    page.fill("#name_ar", cfg["traitement"]["name_ar"])
    page.click("#status"); page.click(f"text={cfg['traitement']['status']}")
    page.click("label:has-text(\"Type de traitement\") + div")
    if cfg["traitement"]["type_manuel"]:
        page.locator("div.v-overlay-container .v-list-item-title", has_text="Manuel").first.click()
    if cfg["traitement"]["type_automatique"]:
        page.locator("div.v-overlay_container, div.v-overlay-container .v-list-item-title", has_text="Automatique").first.click()
    page.click("body")
    page.wait_for_selector("button[type='submit']:not([disabled])", timeout=5000)
    page.locator("button[type='submit']").click()

    # --- Fondement légal ---
    try:
        page.click("text=Fondement légal d'un traitement", timeout=4000)
    except Exception:
        pass
    page.fill("textarea", cfg["fondement"]["texte_fr"])
    page.locator("textarea").nth(1).fill(cfg["fondement"]["texte_ar"])
    if cfg["fondement"].get("base_consentement"):
        page.click("label:has-text('Le consentement exprès de la personne concernée')")
    if cfg["fondement"].get("base_obligation"):
        page.click("label:has-text(\"Le respect d'une obligation légale.\")")
    if cfg["fondement"].get("base_vie"):
        page.click("label:has-text(\"La sauvegarde de la vie de la personne.\")")
    if cfg["fondement"].get("base_vitaux"):
        page.click("label:has-text(\"La sauvegarde d'intérêts vitaux de la personne.\")")
    if cfg["fondement"].get("base_contrat"):
        page.click("label:has-text(\"L'exécution d'un contrat ou précontrat à la demande de la personne\")")
    if cfg["fondement"].get("base_public"):
        page.click("label:has-text(\"L'exécution d'une mission d'intérêt public.\")")
    if cfg["fondement"].get("base_interet_legitime"):
        page.click("label:has-text(\"La réalisation d'un intérêt légitime poursuivi par le responsable du traitement\")")
    tas = page.locator("textarea")
    if tas.count() >= 3:
        tas.nth(2).fill(cfg["fondement"]["note"])
    save_current_section(page, label="Fondement légal")

    # --- Catégories de personnes ---
    remplir_categories_personnes(page, cfg["categories_personnes"])

    # --- Catégories de données (MODAL avec Enregistrer du modal) ---
    remplir_categories_donnees(page, cfg["categories_donnees"])

    # --- Finalité ---
    remplir_finalite(page, cfg["finalite"]["fr"], cfg["finalite"]["ar"])

    # --- Sous-traitements ---
    print(f"➡️ Sous-traitements: {len(cfg['sous_traitements'])} élément(s) à ajouter")
    onglet_sous_traitements = page.get_by_text("Sous-traitements", exact=True)
    onglet_sous_traitements.scroll_into_view_if_needed(); onglet_sous_traitements.click(force=True)
    page.wait_for_timeout(100)
    for st in cfg["sous_traitements"]:
        ajouter_sous_traitement(page, st)

    # --- Conservation ---
    ajouter_conservation_donnees(page, cfg["conservation"])

    # --- Destinataires ---
    ajouter_destinataires(page, cfg["destinataires"])

    # --- Consentement ---
    ajouter_consentement(page, cfg["consentement"])

    # --- Droits des personnes ---
    remplir_droits_personnes(page, {
        "information": cfg["droits"].get("information"),
        "acces": cfg["droits"].get("acces"),
        "rectification": cfg["droits"].get("rectification"),
        "opposition": cfg["droits"].get("opposition"),
    })

    # --- Tâches initiales ---
    ajouter_taches_initiales(page, cfg["taches"])

    print("🎉 Script terminé.")
